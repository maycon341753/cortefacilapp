#!/usr/bin/env node

/**
 * Script para verificar o banco de dados do EasyPanel
 * Execute este script no terminal do EasyPanel para verificar o banco online
 */

const mysql = require('mysql2/promise');

// Configura√ß√µes do EasyPanel (produ√ß√£o)
const easypanelConfig = {
  host: 'cortefacil_cortefacil_user', // Host interno do EasyPanel
  port: 3306,
  user: 'mayconwender',
  password: 'Maycon341753@',
  database: 'u690889028_cortefacil',
  connectTimeout: 15000
};

async function checkEasypanelDatabase() {
  console.log('üåê Verifica√ß√£o do Banco de Dados EasyPanel (Online)');
  console.log('=' .repeat(60));
  
  console.log('üìã Configura√ß√µes de Produ√ß√£o:');
  console.log(`   Host: ${easypanelConfig.host}:${easypanelConfig.port}`);
  console.log(`   User: ${easypanelConfig.user}`);
  console.log(`   Database: ${easypanelConfig.database}`);
  console.log(`   Environment: production`);
  console.log('');
  
  let connection;
  
  try {
    // 1. Teste de Conex√£o
    console.log('üîå Conectando ao MySQL do EasyPanel...');
    connection = await mysql.createConnection(easypanelConfig);
    console.log('   ‚úÖ Conex√£o com EasyPanel estabelecida!');
    
    // 2. Informa√ß√µes do Servidor
    console.log('\nüñ•Ô∏è  Informa√ß√µes do servidor...');
    const [serverInfo] = await connection.execute(`
      SELECT 
        VERSION() as mysql_version,
        NOW() as server_time,
        @@hostname as hostname,
        @@port as port
    `);
    
    console.log(`   ‚úÖ MySQL Version: ${serverInfo[0].mysql_version}`);
    console.log(`   ‚úÖ Server Time: ${serverInfo[0].server_time}`);
    console.log(`   ‚úÖ Hostname: ${serverInfo[0].hostname}`);
    console.log(`   ‚úÖ Port: ${serverInfo[0].port}`);
    
    // 3. Verificar Banco de Dados
    console.log('\nüóÑÔ∏è  Verificando banco de dados...');
    const [databases] = await connection.execute('SHOW DATABASES');
    const dbExists = databases.some(db => Object.values(db)[0] === easypanelConfig.database);
    
    if (dbExists) {
      console.log(`   ‚úÖ Banco '${easypanelConfig.database}' existe`);
    } else {
      console.log(`   ‚ùå Banco '${easypanelConfig.database}' N√ÉO existe`);
      console.log('   üí° Crie o banco no painel do EasyPanel');
      return false;
    }
    
    // 4. Verificar Tabelas
    console.log('\nüìä Verificando estrutura...');
    const [tables] = await connection.execute('SHOW TABLES');
    console.log(`   üìã Total de tabelas: ${tables.length}`);
    
    const expectedTables = [
      'usuarios', 'saloes', 'profissionais', 'especialidades',
      'agendamentos', 'pagamentos', 'password_resets'
    ];
    
    const existingTables = tables.map(table => Object.values(table)[0]);
    
    console.log('\n   üìù Tabelas necess√°rias:');
    let missingTables = [];
    expectedTables.forEach(tableName => {
      const exists = existingTables.includes(tableName);
      console.log(`      ${exists ? '‚úÖ' : '‚ùå'} ${tableName}`);
      if (!exists) missingTables.push(tableName);
    });
    
    if (missingTables.length > 0) {
      console.log(`\n   ‚ö†Ô∏è  Tabelas faltando: ${missingTables.join(', ')}`);
      console.log('   üí° Execute as migra√ß√µes do banco');
    }
    
    // 5. Verificar Dados Essenciais
    if (existingTables.length > 0) {
      console.log('\nüìà Verificando dados essenciais...');
      
      // Usu√°rios
      if (existingTables.includes('usuarios')) {
        const [userStats] = await connection.execute(`
          SELECT 
            COUNT(*) as total,
            SUM(CASE WHEN tipo_usuario = 'admin' THEN 1 ELSE 0 END) as admins,
            SUM(CASE WHEN tipo_usuario = 'cliente' THEN 1 ELSE 0 END) as clientes,
            SUM(CASE WHEN tipo_usuario = 'profissional' THEN 1 ELSE 0 END) as profissionais
          FROM usuarios
        `);
        
        console.log(`   üë§ Usu√°rios: ${userStats[0].total}`);
        console.log(`      üëë Admins: ${userStats[0].admins}`);
        console.log(`      üßë Clientes: ${userStats[0].clientes}`);
        console.log(`      üíº Profissionais: ${userStats[0].profissionais}`);
        
        // Verificar usu√°rio admin padr√£o
        const [adminUser] = await connection.execute(
          'SELECT email FROM usuarios WHERE tipo_usuario = "admin" AND email = "admin@cortefacil.com" LIMIT 1'
        );
        
        if (adminUser.length > 0) {
          console.log('   ‚úÖ Usu√°rio admin padr√£o existe');
        } else {
          console.log('   ‚ö†Ô∏è  Usu√°rio admin padr√£o n√£o encontrado');
        }
      }
      
      // Sal√µes
      if (existingTables.includes('saloes')) {
        const [salaoCount] = await connection.execute('SELECT COUNT(*) as total FROM saloes');
        console.log(`   üè™ Sal√µes cadastrados: ${salaoCount[0].total}`);
      }
      
      // Especialidades
      if (existingTables.includes('especialidades')) {
        const [espCount] = await connection.execute('SELECT COUNT(*) as total FROM especialidades');
        console.log(`   ‚úÇÔ∏è  Especialidades: ${espCount[0].total}`);
      }
    }
    
    // 6. Teste de Performance
    console.log('\n‚ö° Teste de performance online...');
    const startTime = Date.now();
    await connection.execute('SELECT 1');
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    console.log(`   ‚è±Ô∏è  Lat√™ncia: ${responseTime}ms`);
    
    if (responseTime < 100) {
      console.log('   ‚úÖ Performance: Excelente');
    } else if (responseTime < 300) {
      console.log('   ‚úÖ Performance: Boa');
    } else if (responseTime < 1000) {
      console.log('   ‚ö†Ô∏è  Performance: Aceit√°vel');
    } else {
      console.log('   ‚ùå Performance: Lenta');
    }
    
    // 7. Verificar Configura√ß√µes
    console.log('\n‚öôÔ∏è  Configura√ß√µes do MySQL...');
    const [configs] = await connection.execute(`
      SELECT 
        @@max_connections as max_connections,
        @@innodb_buffer_pool_size as buffer_pool_size,
        @@query_cache_size as query_cache_size
    `);
    
    console.log(`   üîó Max Connections: ${configs[0].max_connections}`);
    console.log(`   üíæ Buffer Pool: ${Math.round(configs[0].buffer_pool_size / 1024 / 1024)}MB`);
    console.log(`   üóÉÔ∏è  Query Cache: ${Math.round(configs[0].query_cache_size / 1024 / 1024)}MB`);
    
    console.log('\n' + '='.repeat(60));
    console.log('üéâ BANCO DE DADOS EASYPANEL EST√Å ONLINE!');
    console.log('‚úÖ Sistema pronto para produ√ß√£o');
    console.log('üåê Aplica√ß√£o pode ser deployada com seguran√ßa');
    
    return true;
    
  } catch (error) {
    console.log('\n‚ùå ERRO NO BANCO EASYPANEL:');
    console.log(`   Mensagem: ${error.message}`);
    console.log(`   C√≥digo: ${error.code || 'N/A'}`);
    
    // Diagn√≥sticos espec√≠ficos para EasyPanel
    switch (error.code) {
      case 'ENOTFOUND':
        console.log('\nüí° Diagn√≥stico EasyPanel:');
        console.log('   ‚ùå Host interno n√£o encontrado');
        console.log('   üîß Solu√ß√µes:');
        console.log('      1. Execute este script DENTRO do container EasyPanel');
        console.log('      2. Verifique se o servi√ßo MySQL est√° rodando');
        console.log('      3. Confirme o nome do host interno');
        break;
        
      case 'ECONNREFUSED':
        console.log('\nüí° Diagn√≥stico EasyPanel:');
        console.log('   ‚ùå MySQL n√£o est√° rodando');
        console.log('   üîß Solu√ß√µes:');
        console.log('      1. Inicie o servi√ßo MySQL no painel');
        console.log('      2. Verifique logs do container MySQL');
        console.log('      3. Reinicie o servi√ßo se necess√°rio');
        break;
        
      case 'ER_ACCESS_DENIED_ERROR':
        console.log('\nüí° Diagn√≥stico EasyPanel:');
        console.log('   ‚ùå Credenciais incorretas');
        console.log('   üîß Solu√ß√µes:');
        console.log('      1. Verifique usu√°rio: mayconwender');
        console.log('      2. Verifique senha: Maycon341753@');
        console.log('      3. Recrie o usu√°rio se necess√°rio');
        break;
        
      case 'ER_BAD_DB_ERROR':
        console.log('\nüí° Diagn√≥stico EasyPanel:');
        console.log('   ‚ùå Banco de dados n√£o existe');
        console.log('   üîß Solu√ß√µes:');
        console.log('      1. Crie o banco: u690889028_cortefacil');
        console.log('      2. Execute as migra√ß√µes');
        console.log('      3. Importe dados se necess√°rio');
        break;
        
      default:
        console.log('\nüí° Diagn√≥stico Geral:');
        console.log('   üîß Verifique:');
        console.log('      1. Status dos servi√ßos no EasyPanel');
        console.log('      2. Logs dos containers');
        console.log('      3. Configura√ß√µes de rede');
        console.log('      4. Vari√°veis de ambiente');
    }
    
    console.log('\nüìû Suporte:');
    console.log('   - Acesse o painel EasyPanel');
    console.log('   - Verifique logs dos servi√ßos');
    console.log('   - Contate suporte se necess√°rio');
    
    return false;
    
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  checkEasypanelDatabase()
    .then(success => {
      console.log(`\nüèÅ Resultado: ${success ? 'SUCESSO' : 'FALHA'}`);
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('\nüí• Erro fatal:', error.message);
      process.exit(1);
    });
}

module.exports = { checkEasypanelDatabase, easypanelConfig };