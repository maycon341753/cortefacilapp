<?php
// Teste do Sistema de Agendamento - Intervalos de 30min e Bloqueios
require_once '../config/database.php';
require_once '../models/agendamento.php';

echo "<h2>üß™ Teste do Sistema de Agendamento</h2>";
echo "<hr>";

// Inicializar classe de agendamento
$agendamento = new Agendamento();

// Teste 1: Verificar intervalos de 30 minutos
echo "<h3>üìÖ Teste 1: Intervalos de 30 minutos</h3>";
$profissional_id = 1; // Assumindo que existe um profissional com ID 1
$data = date('Y-m-d', strtotime('+1 day')); // Amanh√£

try {
    $horarios = $agendamento->gerarHorariosDisponiveisComBloqueios($profissional_id, $data, session_id());
    
    if (!empty($horarios)) {
        echo "‚úÖ <strong>Sucesso!</strong> Encontrados " . count($horarios) . " hor√°rios dispon√≠veis:<br>";
        echo "<div style='margin: 10px 0; padding: 10px; background: #f0f8ff; border-left: 4px solid #007cba;'>";
        foreach (array_slice($horarios, 0, 10) as $hora) { // Mostrar apenas os primeiros 10
            echo "üïê $hora<br>";
        }
        if (count($horarios) > 10) {
            echo "... e mais " . (count($horarios) - 10) . " hor√°rios";
        }
        echo "</div>";
        
        // Verificar se os intervalos s√£o de 30 minutos
        $intervalo_correto = true;
        for ($i = 1; $i < min(5, count($horarios)); $i++) {
            $hora_anterior = strtotime($horarios[$i-1]);
            $hora_atual = strtotime($horarios[$i]);
            $diferenca = ($hora_atual - $hora_anterior) / 60; // em minutos
            
            if ($diferenca != 30) {
                $intervalo_correto = false;
                echo "‚ùå Intervalo incorreto entre {$horarios[$i-1]} e {$horarios[$i]}: {$diferenca} minutos<br>";
                break;
            }
        }
        
        if ($intervalo_correto) {
            echo "‚úÖ <strong>Intervalos de 30 minutos confirmados!</strong><br>";
        }
    } else {
        echo "‚ö†Ô∏è Nenhum hor√°rio dispon√≠vel encontrado para o profissional $profissional_id na data $data<br>";
    }
} catch (Exception $e) {
    echo "‚ùå Erro ao gerar hor√°rios: " . $e->getMessage() . "<br>";
}

echo "<hr>";

// Teste 2: Sistema de bloqueio tempor√°rio
echo "<h3>üîí Teste 2: Sistema de Bloqueio Tempor√°rio</h3>";

if (!empty($horarios)) {
    $hora_teste = $horarios[0]; // Primeiro hor√°rio dispon√≠vel
    $session_teste = 'teste_' . uniqid();
    
    try {
        // Bloquear hor√°rio
        $resultado_bloqueio = $agendamento->bloquearHorarioTemporariamente($profissional_id, $data, $hora_teste, $session_teste);
        
        if ($resultado_bloqueio) {
            echo "‚úÖ <strong>Hor√°rio bloqueado com sucesso:</strong> $hora_teste<br>";
            
            // Verificar se o hor√°rio foi removido da lista
            $horarios_apos_bloqueio = $agendamento->gerarHorariosDisponiveisComBloqueios($profissional_id, $data, 'outra_sessao');
            
            if (!in_array($hora_teste, $horarios_apos_bloqueio)) {
                echo "‚úÖ <strong>Bloqueio funcionando:</strong> Hor√°rio $hora_teste n√£o aparece mais na lista para outras sess√µes<br>";
            } else {
                echo "‚ùå <strong>Erro no bloqueio:</strong> Hor√°rio $hora_teste ainda aparece na lista<br>";
            }
            
            // Verificar se o hor√°rio ainda aparece para a mesma sess√£o
            $horarios_mesma_sessao = $agendamento->gerarHorariosDisponiveisComBloqueios($profissional_id, $data, $session_teste);
            
            if (in_array($hora_teste, $horarios_mesma_sessao)) {
                echo "‚úÖ <strong>Sess√£o pr√≥pria:</strong> Hor√°rio $hora_teste ainda dispon√≠vel para a sess√£o que bloqueou<br>";
            } else {
                echo "‚ö†Ô∏è <strong>Aten√ß√£o:</strong> Hor√°rio $hora_teste n√£o dispon√≠vel nem para a sess√£o que bloqueou<br>";
            }
            
            // Desbloquear hor√°rio
            $resultado_desbloqueio = $agendamento->desbloquearHorario($profissional_id, $data, $hora_teste, $session_teste);
            
            if ($resultado_desbloqueio) {
                echo "‚úÖ <strong>Hor√°rio desbloqueado com sucesso</strong><br>";
                
                // Verificar se voltou √† lista
                $horarios_apos_desbloqueio = $agendamento->gerarHorariosDisponiveisComBloqueios($profissional_id, $data, 'outra_sessao');
                
                if (in_array($hora_teste, $horarios_apos_desbloqueio)) {
                    echo "‚úÖ <strong>Desbloqueio funcionando:</strong> Hor√°rio $hora_teste voltou √† lista<br>";
                } else {
                    echo "‚ùå <strong>Erro no desbloqueio:</strong> Hor√°rio $hora_teste n√£o voltou √† lista<br>";
                }
            } else {
                echo "‚ùå Erro ao desbloquear hor√°rio<br>";
            }
            
        } else {
            echo "‚ùå Erro ao bloquear hor√°rio<br>";
        }
    } catch (Exception $e) {
        echo "‚ùå Erro no teste de bloqueio: " . $e->getMessage() . "<br>";
    }
} else {
    echo "‚ö†Ô∏è N√£o foi poss√≠vel testar bloqueios - nenhum hor√°rio dispon√≠vel<br>";
}

echo "<hr>";

// Teste 3: Verificar tabela de bloqueios
echo "<h3>üóÉÔ∏è Teste 3: Tabela de Bloqueios Tempor√°rios</h3>";

try {
    $pdo = new PDO("mysql:host=$host;dbname=$dbname;charset=utf8", $username, $password);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    // Verificar se a tabela existe
    $stmt = $pdo->query("SHOW TABLES LIKE 'bloqueios_temporarios'");
    if ($stmt->rowCount() > 0) {
        echo "‚úÖ <strong>Tabela 'bloqueios_temporarios' existe</strong><br>";
        
        // Verificar estrutura da tabela
        $stmt = $pdo->query("DESCRIBE bloqueios_temporarios");
        $colunas = $stmt->fetchAll(PDO::FETCH_COLUMN);
        
        $colunas_esperadas = ['id', 'id_profissional', 'data', 'hora', 'session_id', 'ip_cliente', 'created_at', 'expires_at'];
        $colunas_faltando = array_diff($colunas_esperadas, $colunas);
        
        if (empty($colunas_faltando)) {
            echo "‚úÖ <strong>Estrutura da tabela correta</strong><br>";
        } else {
            echo "‚ùå <strong>Colunas faltando:</strong> " . implode(', ', $colunas_faltando) . "<br>";
        }
        
        // Verificar registros ativos
        $stmt = $pdo->query("SELECT COUNT(*) FROM bloqueios_temporarios WHERE expires_at > NOW()");
        $bloqueios_ativos = $stmt->fetchColumn();
        
        echo "üìä <strong>Bloqueios ativos:</strong> $bloqueios_ativos<br>";
        
    } else {
        echo "‚ùå <strong>Tabela 'bloqueios_temporarios' n√£o existe</strong><br>";
    }
    
} catch (Exception $e) {
    echo "‚ùå Erro ao verificar tabela: " . $e->getMessage() . "<br>";
}

echo "<hr>";
echo "<h3>üìã Resumo dos Testes</h3>";
echo "<p>‚úÖ = Funcionando corretamente</p>";
echo "<p>‚ùå = Erro encontrado</p>";
echo "<p>‚ö†Ô∏è = Aten√ß√£o necess√°ria</p>";
echo "<br><a href='cliente/agendar.php' style='background: #007cba; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;'>üîó Testar Interface de Agendamento</a>";
?>