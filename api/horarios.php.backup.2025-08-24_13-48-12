<?php
/**
 * API de Horários - Versão Atualizada
 * Busca horários da tabela "horarios" ao invés de gerar dinamicamente
 * Atualizado em: 2025-08-23 20:33:23
 */

header("Content-Type: application/json");
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");

// Tratar requisições OPTIONS
if ($_SERVER["REQUEST_METHOD"] === "OPTIONS") {
    http_response_code(200);
    exit();
}

require_once __DIR__ . "/../config/database.php";

try {
    // Validar parâmetros
    $salao_id = isset($_GET["salao_id"]) ? (int)$_GET["salao_id"] : 0;
    $profissional_id = isset($_GET["profissional_id"]) ? (int)$_GET["profissional_id"] : 0;
    $data = isset($_GET["data"]) ? $_GET["data"] : "";
    
    if (!$salao_id || !$profissional_id || !$data) {
        throw new Exception("Parâmetros obrigatórios: salao_id, profissional_id, data");
    }
    
    // Validar formato da data
    if (!preg_match("/^\d{4}-\d{2}-\d{2}$/", $data)) {
        throw new Exception("Formato de data inválido. Use YYYY-MM-DD");
    }
    
    // Conectar ao banco
    $database = Database::getInstance();
    $conn = $database->connect();
    
    if (!$conn) {
        throw new Exception("Erro na conexão com banco de dados");
    }
    
    // Buscar horários cadastrados para o profissional
    $stmt = $conn->prepare("
        SELECT hora_inicio, hora_fim 
        FROM horarios 
        WHERE profissional_id = ? 
        AND salao_id = ? 
        AND ativo = 1
        ORDER BY hora_inicio
    ");
    
    $stmt->execute([$profissional_id, $salao_id]);
    $horarios_cadastrados = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    if (empty($horarios_cadastrados)) {
        // Se não há horários cadastrados, retornar horários padrão
        $horarios_padrao = [
            ["hora_inicio" => "08:00:00", "hora_fim" => "08:30:00"],
            ["hora_inicio" => "08:30:00", "hora_fim" => "09:00:00"],
            ["hora_inicio" => "09:00:00", "hora_fim" => "09:30:00"],
            ["hora_inicio" => "09:30:00", "hora_fim" => "10:00:00"],
            ["hora_inicio" => "10:00:00", "hora_fim" => "10:30:00"],
            ["hora_inicio" => "10:30:00", "hora_fim" => "11:00:00"],
            ["hora_inicio" => "11:00:00", "hora_fim" => "11:30:00"],
            ["hora_inicio" => "11:30:00", "hora_fim" => "12:00:00"],
            ["hora_inicio" => "13:00:00", "hora_fim" => "13:30:00"],
            ["hora_inicio" => "13:30:00", "hora_fim" => "14:00:00"],
            ["hora_inicio" => "14:00:00", "hora_fim" => "14:30:00"],
            ["hora_inicio" => "14:30:00", "hora_fim" => "15:00:00"],
            ["hora_inicio" => "15:00:00", "hora_fim" => "15:30:00"],
            ["hora_inicio" => "15:30:00", "hora_fim" => "16:00:00"],
            ["hora_inicio" => "16:00:00", "hora_fim" => "16:30:00"],
            ["hora_inicio" => "16:30:00", "hora_fim" => "17:00:00"],
            ["hora_inicio" => "17:00:00", "hora_fim" => "17:30:00"],
            ["hora_inicio" => "17:30:00", "hora_fim" => "18:00:00"]
        ];
        $horarios_cadastrados = $horarios_padrao;
    }
    
    // Buscar horários já agendados para a data
    $stmt = $conn->prepare("
        SELECT hora as hora_inicio, hora as hora_fim 
        FROM agendamentos 
        WHERE id_profissional = ? 
        AND id_salao = ? 
        AND data = ? 
        AND status IN ('confirmado', 'pendente')
    ");
    
    $stmt->execute([$profissional_id, $salao_id, $data]);
    $horarios_ocupados = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Buscar bloqueios temporários (últimos 10 minutos)
    $stmt = $conn->prepare("
        SELECT hora_inicio, hora_fim 
        FROM bloqueios_temporarios 
        WHERE id_profissional = ? 
        AND id_salao = ? 
        AND data_bloqueio = ? 
        AND created_at > DATE_SUB(NOW(), INTERVAL 10 MINUTE)
    ");
    
    $stmt->execute([$profissional_id, $salao_id, $data]);
    $bloqueios_temporarios = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Combinar horários ocupados e bloqueados
    $horarios_indisponiveis = array_merge($horarios_ocupados, $bloqueios_temporarios);
    
    // Filtrar horários disponíveis
    $horarios_disponiveis = [];
    
    foreach ($horarios_cadastrados as $horario) {
        $disponivel = true;
        
        foreach ($horarios_indisponiveis as $ocupado) {
            if ($horario["hora_inicio"] === $ocupado["hora_inicio"] && 
                $horario["hora_fim"] === $ocupado["hora_fim"]) {
                $disponivel = false;
                break;
            }
        }
        
        if ($disponivel) {
            $horarios_disponiveis[] = [
                "hora_inicio" => substr($horario["hora_inicio"], 0, 5), // HH:MM
                "hora_fim" => substr($horario["hora_fim"], 0, 5),       // HH:MM
                "display" => substr($horario["hora_inicio"], 0, 5) . " - " . substr($horario["hora_fim"], 0, 5)
            ];
        }
    }
    
    // Retornar resposta
    echo json_encode([
        "success" => true,
        "horarios" => $horarios_disponiveis,
        "total" => count($horarios_disponiveis),
        "data" => $data,
        "profissional_id" => $profissional_id,
        "salao_id" => $salao_id,
        "debug" => [
            "horarios_cadastrados" => count($horarios_cadastrados),
            "horarios_ocupados" => count($horarios_ocupados),
            "bloqueios_temporarios" => count($bloqueios_temporarios)
        ]
    ]);
    
} catch (Exception $e) {
    http_response_code(400);
    echo json_encode([
        "success" => false,
        "error" => $e->getMessage(),
        "debug" => [
            "file" => __FILE__,
            "line" => $e->getLine()
        ]
    ]);
}
?>