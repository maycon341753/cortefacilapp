const mysql = require('mysql2/promise');
const net = require('net');

// Configura√ß√µes para diagn√≥stico
const CONFIGS = {
    hostinger_original: {
        name: 'Hostinger Original',
        host: 'srv973908.hstgr.cloud',
        port: 3306,
        user: 'u690889028_mayconwender',
        password: 'Maycon341753',
        database: 'u690889028_cortefacil'
    },
    hostinger_sem_db: {
        name: 'Hostinger sem Database',
        host: 'srv973908.hstgr.cloud',
        port: 3306,
        user: 'u690889028_mayconwender',
        password: 'Maycon341753'
    },
    hostinger_ip: {
        name: 'Hostinger por IP',
        host: '31.97.171.104',
        port: 3306,
        user: 'u690889028_mayconwender',
        password: 'Maycon341753',
        database: 'u690889028_cortefacil'
    }
};

// Fun√ß√£o para testar conectividade de porta
function testPortConnectivity(host, port) {
    return new Promise((resolve) => {
        const socket = new net.Socket();
        const timeout = 5000;
        
        socket.setTimeout(timeout);
        
        socket.on('connect', () => {
            socket.destroy();
            resolve({ success: true, message: 'Porta acess√≠vel' });
        });
        
        socket.on('timeout', () => {
            socket.destroy();
            resolve({ success: false, message: 'Timeout na conex√£o' });
        });
        
        socket.on('error', (err) => {
            socket.destroy();
            resolve({ success: false, message: `Erro: ${err.message}` });
        });
        
        socket.connect(port, host);
    });
}

// Fun√ß√£o para testar conex√£o MySQL
async function testMySQLConnection(config) {
    try {
        console.log(`\nüîç Testando: ${config.name}`);
        console.log(`   Host: ${config.host}:${config.port}`);
        console.log(`   User: ${config.user}`);
        console.log(`   Database: ${config.database || 'N/A'}`);
        
        // Primeiro, testar conectividade da porta
        const portTest = await testPortConnectivity(config.host, config.port);
        console.log(`   üåê Porta ${config.port}: ${portTest.success ? '‚úÖ' : '‚ùå'} ${portTest.message}`);
        
        if (!portTest.success) {
            return { success: false, error: 'Porta inacess√≠vel', details: portTest.message };
        }
        
        // Testar conex√£o MySQL
        const connection = await mysql.createConnection({
            host: config.host,
            port: config.port,
            user: config.user,
            password: config.password,
            database: config.database,
            connectTimeout: 10000,
            acquireTimeout: 10000
        });
        
        // Testar query simples
        const [rows] = await connection.execute('SELECT 1 as test');
        console.log(`   ‚úÖ Conex√£o MySQL: Sucesso`);
        console.log(`   ‚úÖ Query teste: ${JSON.stringify(rows[0])}`);
        
        // Se tem database, testar acesso √†s tabelas
        if (config.database) {
            try {
                const [tables] = await connection.execute('SHOW TABLES');
                console.log(`   üìã Tabelas encontradas: ${tables.length}`);
                if (tables.length > 0) {
                    console.log(`   üìã Primeira tabela: ${Object.values(tables[0])[0]}`);
                }
            } catch (tableErr) {
                console.log(`   ‚ö†Ô∏è  Erro ao listar tabelas: ${tableErr.message}`);
            }
        }
        
        await connection.end();
        return { success: true };
        
    } catch (error) {
        console.log(`   ‚ùå Erro MySQL: ${error.code || 'UNKNOWN'}`);
        console.log(`   üìù Mensagem: ${error.message}`);
        
        // An√°lise espec√≠fica do erro
        if (error.code === 'ER_ACCESS_DENIED_ERROR') {
            console.log(`   üîç Diagn√≥stico: Usu√°rio/senha incorretos ou sem permiss√£o para este IP`);
        } else if (error.code === 'ECONNREFUSED') {
            console.log(`   üîç Diagn√≥stico: Porta MySQL bloqueada ou servi√ßo inativo`);
        } else if (error.code === 'ETIMEDOUT') {
            console.log(`   üîç Diagn√≥stico: Timeout - firewall ou rede lenta`);
        } else if (error.code === 'ENOTFOUND') {
            console.log(`   üîç Diagn√≥stico: Host n√£o encontrado - DNS ou hostname incorreto`);
        }
        
        return { success: false, error: error.code, details: error.message };
    }
}

// Fun√ß√£o para obter informa√ß√µes do ambiente
function getEnvironmentInfo() {
    console.log('üñ•Ô∏è  Informa√ß√µes do Ambiente:');
    console.log(`   Node.js: ${process.version}`);
    console.log(`   Plataforma: ${process.platform}`);
    console.log(`   Arquitetura: ${process.arch}`);
    
    // Tentar obter IP externo (se poss√≠vel)
    const os = require('os');
    const interfaces = os.networkInterfaces();
    console.log('\nüåê Interfaces de Rede:');
    
    Object.keys(interfaces).forEach(name => {
        interfaces[name].forEach(iface => {
            if (iface.family === 'IPv4' && !iface.internal) {
                console.log(`   ${name}: ${iface.address}`);
            }
        });
    });
}

// Fun√ß√£o principal
async function diagnosticarMySQL() {
    console.log('üîß DIAGN√ìSTICO MYSQL REMOTO - CORTEFACIL');
    console.log('=' .repeat(50));
    
    getEnvironmentInfo();
    
    console.log('\nüìä Testando Configura√ß√µes MySQL:');
    console.log('=' .repeat(50));
    
    const resultados = {};
    
    // Testar cada configura√ß√£o
    for (const [key, config] of Object.entries(CONFIGS)) {
        resultados[key] = await testMySQLConnection(config);
        await new Promise(resolve => setTimeout(resolve, 1000)); // Pausa entre testes
    }
    
    // Resumo dos resultados
    console.log('\nüìã RESUMO DOS TESTES:');
    console.log('=' .repeat(50));
    
    let sucessos = 0;
    Object.entries(resultados).forEach(([key, result]) => {
        const status = result.success ? '‚úÖ SUCESSO' : '‚ùå FALHOU';
        console.log(`${CONFIGS[key].name}: ${status}`);
        if (result.success) sucessos++;
        if (!result.success && result.error) {
            console.log(`   Erro: ${result.error} - ${result.details}`);
        }
    });
    
    console.log('\nüéØ RECOMENDA√á√ïES:');
    console.log('=' .repeat(50));
    
    if (sucessos === 0) {
        console.log('‚ùå Nenhuma conex√£o funcionou. Poss√≠veis causas:');
        console.log('   1. Firewall bloqueando porta 3306');
        console.log('   2. Usu√°rio MySQL sem permiss√µes remotas');
        console.log('   3. Servidor MySQL inativo');
        console.log('   4. Credenciais incorretas');
        console.log('\nüöÄ Solu√ß√µes sugeridas:');
        console.log('   1. Usar SSH Tunnel (recomendado)');
        console.log('   2. Contatar suporte Hostinger');
        console.log('   3. Configurar hosts remotos no painel MySQL');
    } else {
        console.log(`‚úÖ ${sucessos} configura√ß√£o(√µes) funcionaram!`);
        console.log('   Use a configura√ß√£o que funcionou no seu backend.');
    }
    
    console.log('\nüìû Pr√≥ximos Passos:');
    console.log('   1. Se nenhuma conex√£o funcionou, implemente SSH tunnel');
    console.log('   2. Verifique o arquivo SOLUCAO_DOCKER_IP.md');
    console.log('   3. Configure hosts remotos no phpMyAdmin');
    console.log('   4. Teste novamente ap√≥s as configura√ß√µes');
}

// Executar diagn√≥stico
if (require.main === module) {
    diagnosticarMySQL().catch(console.error);
}

module.exports = { diagnosticarMySQL, testMySQLConnection, CONFIGS };