const mysql = require('mysql2/promise');
require('dotenv').config({ path: './backend/server/.env.easypanel' });

async function verifyOnlineTables() {
    console.log('üîç Verificando tabelas no banco de dados online EasyPanel...');
    
    const connection = await mysql.createConnection({
        host: process.env.DB_HOST,
        port: process.env.DB_PORT,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        database: process.env.DB_NAME
    });

    try {
        console.log('‚úÖ Conectado ao banco:', process.env.DB_NAME);
        
        // Listar todas as tabelas
        const [tables] = await connection.execute('SHOW TABLES');
        console.log('\nüìã Tabelas encontradas:');
        tables.forEach((table, index) => {
            const tableName = Object.values(table)[0];
            console.log(`${index + 1}. ${tableName}`);
        });

        // Tabelas esperadas para o sistema de cadastro
        const expectedTables = [
            'usuarios',
            'agendamentos', 
            'servicos',
            'horarios_disponiveis',
            'password_resets'
        ];

        console.log('\nüéØ Verificando tabelas essenciais para cadastro:');
        const missingTables = [];
        
        for (const expectedTable of expectedTables) {
            const tableExists = tables.some(table => 
                Object.values(table)[0] === expectedTable
            );
            
            if (tableExists) {
                console.log(`‚úÖ ${expectedTable} - OK`);
                
                // Verificar estrutura da tabela usuarios (essencial para cadastro)
                if (expectedTable === 'usuarios') {
                    const [columns] = await connection.execute(`DESCRIBE ${expectedTable}`);
                    console.log(`   üìä Colunas da tabela usuarios:`);
                    columns.forEach(col => {
                        console.log(`      - ${col.Field} (${col.Type})`);
                    });
                }
            } else {
                console.log(`‚ùå ${expectedTable} - FALTANDO`);
                missingTables.push(expectedTable);
            }
        }

        // Verificar se existe usu√°rio admin
        if (tables.some(table => Object.values(table)[0] === 'usuarios')) {
            const [adminUsers] = await connection.execute(
                "SELECT id, nome, email, tipo_usuario FROM usuarios WHERE tipo_usuario = 'admin' LIMIT 5"
            );
            
            console.log('\nüë§ Usu√°rios admin encontrados:');
            if (adminUsers.length > 0) {
                adminUsers.forEach(user => {
                    console.log(`   - ID: ${user.id}, Nome: ${user.nome}, Email: ${user.email}`);
                });
            } else {
                console.log('   ‚ö†Ô∏è  Nenhum usu√°rio admin encontrado');
            }
        }

        // Resumo final
        console.log('\nüìä RESUMO DA VERIFICA√á√ÉO:');
        console.log(`‚úÖ Tabelas encontradas: ${tables.length}`);
        console.log(`‚úÖ Tabelas essenciais OK: ${expectedTables.length - missingTables.length}/${expectedTables.length}`);
        
        if (missingTables.length > 0) {
            console.log(`‚ùå Tabelas faltando: ${missingTables.join(', ')}`);
            console.log('\n‚ö†Ô∏è  A√á√ÉO NECESS√ÅRIA: Executar script de cria√ß√£o do banco de dados');
        } else {
            console.log('‚úÖ Todas as tabelas essenciais est√£o presentes!');
            console.log('‚úÖ Sistema de cadastro deve funcionar corretamente');
        }

    } catch (error) {
        console.error('‚ùå Erro ao verificar tabelas:', error.message);
    } finally {
        await connection.end();
    }
}

verifyOnlineTables().catch(console.error);